[
  {
    "question": "Класс - это:",
    "answers": [
      {
        "answer": "любой тип данных, определяемый пользователем",
        "right": false
      },
      {
        "answer": "тип данных, определяемый пользователем и сочетающий в себе данные и функции их обработки",
        "right": true
      },
      {
        "answer": "функция с наследованием",
        "right": false
      },
      {
        "answer": "структура, для которой в программе имеются функции работы с нею",
        "right": false
      }
    ]
  },

  {
    "question": "Членами класса могут быть:",
    "answers": [
      {
        "answer": "как переменные, так и функции, могут быть объявлены как private и как public",
        "right": true
      },
      {
        "answer": "только переменные, объявленные как private",
        "right": false
      },
      {
        "answer": "только переменные и функции, объявленные как private",
        "right": false
      },
      {
        "answer": "только переменные и функции, объявленные как public",
        "right": false
      },
      {
        "answer": "только функции, объявленные как private",
        "right": false
      }
    ]
  },
  {
    "question": "Что называется конструктором?",
    "answers": [
      {
        "answer": "метод, имя которого совпадает с именем класса и который вызывается автоматически при создании объекта класса",
        "right": true
      },
      {
        "answer": "метод, имя которого совпадает с именем класса и который вызывается автоматически при объявлении класса (до создания объекта класса)",
        "right": false
      },
      {
        "answer": "метод, имя которого необязательно совпадает с именем класса и который вызывается при создании объекта класса",
        "right": false
      },
      {
        "answer": " метод, имя которого совпадает с именем класса и который необходимо явно вызывать из головной программы при объявлении объекта класса",
        "right": false
      }
    ]
  },
  {
    "question": "Отметьте правильные утверждения",
    "answers": [
      {
        "answer": "конструкторы класса не наследуются",
        "right": true
      },
      {
        "answer": "конструкторов класса может быть несколько, их синтаксис определяется программистом",
        "right": false
      },
      {
        "answer": "конструкторов класса может быть несколько, но их синтаксис должен подчиняться правилам перегрузки функций",
        "right": true
      },
      {
        "answer": "конструктор возвращает указатель на объект",
        "right": false
      },
      {
        "answer": "конструктор не возвращает значение",
        "right": true
      }
    ]
  },
  {
    "question": "Что называется деструктором?",
    "answers": [
      {
        "answer": "метод, который уничтожает объект",
        "right": false
      },
      {
        "answer": "метод, который удаляет объект",
        "right": false
      },
      {
        "answer": "метод, который освобождает память, занимаемую объектом",
        "right": true
      },
      {
        "answer": "системная функция, которая освобождает память, занимаемую объектом",
        "right": false
      }
    ]
  },
  {
    "question": " Что называется наследованием?",
    "answers": [
      {
        "answer": "это механизм, посредством которого производный класс получает элементы родительского и может дополнять либо изменять их свойства и методы",
        "right": true
      },
      {
        "answer": "это механизм переопределения методов базового класса",
        "right": false
      },
      {
        "answer": "это механизм, посредством которого производный класс получает все поля базового класса",
        "right": false
      },
      {
        "answer": "это механизм, посредством которого производный класс получает элементы родительского, может их дополнить, но не может переопределить",
        "right": false
      }
    ]
  },
  {
    "question": "Выберите правильное объявление производного класса",
    "answers": [
      {
        "answer": "class MoreDetails:: Details;",
        "right": false
      },
      {
        "answer": "class MoreDetails: public class Details;",
        "right": false
      },
      {
        "answer": "class MoreDetails: public Details;",
        "right": true
      },
      {
        "answer": " class MoreDetails: class(Details);",
        "right": false
      }
    ]
  },
  {
    "question": "Возможность и способ обращения производного класса к элементам базового определяется",
    "answers": [
      {
        "answer": "ключами доступа: private, public, protected в теле производного класса",
        "right": false
      },
      {
        "answer": "только ключом доступа protected в заголовке объявления производного класса",
        "right": false
      },
      {
        "answer": "ключами доступа: private, public, protected в заголовке объявления производного класса",
        "right": true
      },
      {
        "answer": "ключами доступа: private, public, protected в теле базового класса",
        "right": false
      }
    ]
  },
  {
    "question": "Дружественная функция - это",
    "answers": [
      {
        "answer": "функция другого класса, среди аргументов которой есть элементы данного класса",
        "right": false
      },
      {
        "answer": "функция, объявленная в классе с атрибутом friend, но не являющаяся членом класса;",
        "right": true
      },
      {
        "answer": "функция, являющаяся членом класса и объявленная с атрибутом friend;",
        "right": false
      },
      {
        "answer": "функция, которая в другом классе объявлена как дружественная данному",
        "right": false
      }
    ]
  },
  {
    "question": "Шаблон функции - это...",
    "answers": [
      {
        "answer": "определение функции, в которой типу обрабатываемых данных присвоено условное обозначение",
        "right": true
      },
      {
        "answer": "прототип функции, в котором вместо имен параметров указан условный тип",
        "right":false
      },
      {
        "answer": "определение функции, в котором указаны возможные варианты типов обрабатываемых параметров",
        "right": false
      },
      {
        "answer": "определение функции, в котором в прототипе указан условный тип, а в определении указаны варианты типов обрабатываемых параметров",
        "right": false
      }
    ]
  },
  {
    "question": "Переопределение операций имеет вид:",
    "answers": [
      {
        "answer": "имя_класса, ключевое слово operation, символ операции",
        "right": false
      },
      {
        "answer": "имя_класса, ключевое слово operator, символ операции, в круглых скобках могут быть указаны аргументы",
        "right":true
      },
      {
        "answer": "имя_класса, ключевое слово operator, список аргументов",
        "right": false
      },
      {
        "answer": "имя_класса, два двоеточия, ключевое слово operator, символ операции",
        "right": false
      }
    ]
  },
  {
    "question": "Для доступа к элементам объекта используются:",
    "answers": [
      {
        "answer": "при обращении через имя объекта – точка, при обращении через указатель – операция «->»",
        "right": true
      },
      {
        "answer": "при обращении через имя объекта – два двоеточия, при обращении через указатель – операция «точка»",
        "right": false
      },
      {
        "answer": "при обращении через имя объекта – точка, при обращении через указатель – два двоеточия",
        "right": false
      },
      {
        "answer": "при обращении через имя объекта – два двоеточия, при обращении через указатель – операция «->»",
        "right": false
      }
    ]
  }
]